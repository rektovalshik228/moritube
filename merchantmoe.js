const { ethers } = require("ethers");

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
const CONFIG = {
  RPC_URL: "https://rpc.ankr.com/mantle", // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π RPC
  PRIVATE_KEY: "0xcc51935a9a4321e996e21fa6cc9d994b4ba8ea01b2404fa48bd0925ce975d780",
  
  // –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
  ADDRESSES: {
    ROUTER: "0x45a62b090df48243f12a21897e7ed91863e2c86b",
    WMNT: "0x78c1b0c915c4faa5fffa6cabf0219da63d7f4cb8",
    MOE: "0x4515a45337f461a11ff0fe8abf3c606ae5dc00c9"
  },

  // –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–∞–∑–∞
  GAS_SETTINGS: {
    PRICE_GWEI: 1.5, // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π gas price
    LIMIT: 3500000    // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π gas limit
  },

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–≤–∞–ø–∞
  SWAP: {
    SLIPPAGE: 3, // 3% slippage
    AMOUNT: "0.001" // 0.001 MNT
  }
};

// –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π ABI –¥–ª—è —Ä–∞–±–æ—Ç—ã
const ABI = {
  ROUTER: [
    // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π ABI –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫
    "function swapExactETHForTokens(uint256 amountOutMin, address[] path, address to, uint256 deadline) payable returns (uint[] amounts)"
  ]
};

async function executeSwap() {
  try {
    // 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∏ –∫–æ—à–µ–ª—å–∫–∞
    const provider = new ethers.JsonRpcProvider(CONFIG.RPC_URL);
    const wallet = new ethers.Wallet(CONFIG.PRIVATE_KEY, provider);
    
    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
    const balance = await provider.getBalance(wallet.address);
    console.log(`üí∞ –ë–∞–ª–∞–Ω—Å: ${ethers.formatEther(balance)} MNT`);
    
    const amountIn = ethers.parseUnits(CONFIG.SWAP.AMOUNT, 18);
    if (balance < amountIn) {
      throw new Error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–≤–∞–ø–∞");
    }

    // 3. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const router = new ethers.Contract(
      CONFIG.ADDRESSES.ROUTER,
      ABI.ROUTER,
      wallet
    );

    const path = [CONFIG.ADDRESSES.WMNT, CONFIG.ADDRESSES.MOE];
    const deadline = Math.floor(Date.now() / 1000) + 600; // 10 –º–∏–Ω—É—Ç
    
    // 4. –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –±–µ–∑ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ getAmountsOut
    const tx = await router.swapExactETHForTokens(
      1, // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (1 wei —Ç–æ–∫–µ–Ω–∞)
      path,
      wallet.address,
      deadline,
      {
        value: amountIn,
        gasPrice: ethers.parseUnits(CONFIG.GAS_SETTINGS.PRICE_GWEI.toString(), "gwei"),
        gasLimit: CONFIG.GAS_SETTINGS.LIMIT
      }
    );

    console.log(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: https://mantlescan.xyz/tx/${tx.hash}`);
    const receipt = await tx.wait();
    console.log(`üü¢ –£—Å–ø–µ—à–Ω–æ! –ë–ª–æ–∫: ${receipt.blockNumber}`);

  } catch (error) {
    console.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", error.message);
    if (error.transactionHash) {
      console.log(`üîó –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é: https://mantlescan.xyz/tx/${error.transactionHash}`);
    }
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫
executeSwap();